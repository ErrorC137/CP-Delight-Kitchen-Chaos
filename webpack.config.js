const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  // Change the entry to an object so that the key ("main") becomes the bundle name.
  entry: {
    main: './src/game/main.js'
  },

  // Output configuration for GitHub Pages.
  output: {
    // The output directory for GitHub Pages.
    path: path.resolve(__dirname, 'docs'),
    // Use the entry name (e.g. main) to form the bundle's filename.
    filename: '[name].bundle.js',
    // Also give unique names to additional chunks generated by code splitting.
    chunkFilename: '[name].bundle.js',
    // Use a relative public path so that GitHub Pages can load assets properly.
    publicPath: './'
  },

  module: {
    rules: [
      // Transpile ES6+ JavaScript using Babel.
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: 'babel-loader'
      },

      // Process images, JSON, and other static assets.
      {
        test: /\.(png|jpe?g|gif|svg|json)$/,
        type: 'asset/resource',
        generator: {
          // Place assets in the "docs/assets" folder.
          filename: 'assets/[name][ext]'
        }
      }
    ]
  },

  resolve: {
    extensions: ['.js'],
    alias: {
      // Ensure Phaser resolves correctly using the bundled Phaser build.
      phaser: path.resolve(__dirname, 'node_modules/phaser/dist/phaser.js')
    }
  },

  plugins: [
    // Automatically generate an index.html file in the output directory with the bundle injected.
    new HtmlWebpackPlugin({
      template: 'src/index.html', // The source template.
      filename: 'index.html',      // Output filename in the "docs" folder.
      inject: 'body'               // Inject the script at the end of the <body>.
    })
  ],

  devServer: {
    // Specify the static folder, open the browser, and enable features for development.
    static: path.join(__dirname, 'docs'),
    open: true,
    compress: true,
    hot: true,
    port: 8080,
    historyApiFallback: true
  },

  optimization: {
    // Enable minimization in production.
    minimize: true,
    // Configure splitChunks to separate vendor libraries into separate files.
    splitChunks: {
      cacheGroups: {
        // Example cache group to isolate Phaser and similar libraries if needed.
        phaser: {
          test: /[\\/]node_modules[\\/]phaser[\\/]/,
          name: 'phaser',
          chunks: 'all',
          priority: 10
        }
      }
    }
  },

  performance: {
    // Set performance size limits (adjust as needed).
    maxEntrypointSize: 512000,
    maxAssetSize: 512000
  }
};
